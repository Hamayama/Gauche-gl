;;;
;;; glut-lib.stub - glue functions for GLUT
;;;
;;;  Copyright(C) 2001-2002 by Shiro Kawai (shiro@acm.org)
;;;
;;;  Permission to use, copy, modify, distribute this software and
;;;  accompanying documentation for any purpose is hereby granted,
;;;  provided that existing copyright notices are retained in all
;;;  copies and that this notice is included verbatim in all
;;;  distributions.
;;;  This software is provided as is, without express or implied
;;;  warranty.  In no circumstances the author(s) shall be liable
;;;  for any damages arising out of the use of this software.
;;;
;;;  $Id: glut-lib.stub,v 1.9 2002-08-31 07:49:43 shirok Exp $
;;;

"
#if MacOSX
#include <OpenGL/gl.h>
#include <OpenGL/glu.h>
#include <GLUT/glut.h>
#else
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glx.h>
#include <GL/glut.h>
#endif
#include \"gauche-glut.h\"
"

;;========================================================
;; Window manipulation
;;

;; glut-init
;;   Takes list of args instead of C-style argc/argv
(define-cproc glut-init (args)
  "
  int argc, i;
  char **argv;
  ScmObj ap;

  argc = Scm_Length(args);
  if (argc < 0) Scm_Error(\"list expected, but got %S\", args);
  argv = SCM_NEW2(char **, argc * sizeof(char*));
  i = 0;
  SCM_FOR_EACH(ap, args) {
    if (!SCM_STRINGP(SCM_CAR(ap))) {
      Scm_Error(\"string expected, but got %S\", SCM_CAR(ap));
    }
    argv[i] = Scm_GetString(SCM_STRING(SCM_CAR(ap)));
    i++;
  }
  glutInit(&argc, argv);
  SCM_RETURN(Scm_MakeInteger(argc));
  ")

(define-cproc glut-init-display-mode (mode::<fixnum>)
  "glutInitDisplayMode(mode);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-init-display-string (string::<string>)
  "
#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
  glutInitDisplayString(Scm_GetStringConst(string));
#endif
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-init-window-size (width::<int> height::<int>)
  "glutInitWindowSize(width, height);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-init-window-position (x::<int> y::<int>)
  "glutInitWindowPosition(x, y);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-main-loop ()
  "glutMainLoop();
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-create-window (name::<string>)
  "SCM_RETURN(Scm_MakeInteger(glutCreateWindow(Scm_GetStringConst(name))));")

(define-cproc glut-create-sub-window (win::<int> x::<int> y::<int>
                                      width::<int> height::<int>)
  "int win = glutCreateSubWindow(win, x, y, width, height);
   SCM_RETURN(Scm_MakeInteger(win));")

(define-cproc glut-destroy-window (win::<int>)
  "glutDestroyWindow(win);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-post-redisplay ()
  "glutPostRedisplay();
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-post-window-redisplay (win::<int>)
  "#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 11)
   glutPostWindowRedisplay(win);
#endif
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-swap-buffers ()
  "glutSwapBuffers();
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-get-window ()
  "SCM_RETURN(Scm_MakeInteger(glutGetWindow()));")

(define-cproc glut-set-window (win::<int>)
  "glutSetWindow(win);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-set-window-title (title::<string>)
  "glutSetWindowTitle(Scm_GetStringConst(title));
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-set-icon-title (title::<string>)
  "glutSetIconTitle(Scm_GetStringConst(title));
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-position-window (x::<int> y::<int>)
  "glutPositionWindow(x, y);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-reshape-window (width::<int> height::<int>)
  "glutReshapeWindow(width, height);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-push-window ()
  "glutPushWindow();
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-pop-window ()
  "glutPopWindow();
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-iconify-window ()
  "glutIconifyWindow();
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-show-window ()
  "glutShowWindow();
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-hide-window ()
  "glutHideWindow();
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-full-screen ()
  "#if (GLUT_API_VERSION >= 3)
   glutFullScreen();
#endif
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-set-cursor (cursor::<int>)
  "#if (GLUT_API_VERSION >= 3)
   glutSetCursor(cursor);
#endif
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-warp-pointer (x::<int> y::<int>)
  "#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
   glutWarpPointer(x, y);
#endif
   SCM_RETURN(SCM_UNDEFINED);")

;;========================================================
;; Overlay APIs
;;

(define-cproc glut-establish-overlay ()
  "#if (GLUT_API_VERSION >= 3)
   glutEstablishOverlay();
#endif
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-remove-overlay ()
  "#if (GLUT_API_VERSION >= 3)
   glutRemoveOverlay();
#endif
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-use-layer (layer::<fixnum>)
  "#if (GLUT_API_VERSION >= 3)
   glutUseLayer(layer);
#endif
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-post-overlay-redisplay ()
  "#if (GLUT_API_VERSION >= 3)
   glutPostOverlayRedisplay();
#endif
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-post-window-overlay-redisplay (win::<int>)
  "#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 11)
   glutPostWindowOverlayRedisplay(win);
#endif
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-show-overlay ()
  "#if (GLUT_API_VERSION >= 3)
   glutShowOverlay();
#endif
   SCM_RETURN(SCM_UNDEFINED);")
  
(define-cproc glut-hide-overlay ()
  "#if (GLUT_API_VERSION >= 3)
   glutHideOverlay();
#endif
   SCM_RETURN(SCM_UNDEFINED);")

;;========================================================
;; Menu APIs
;;

;; Glut menu API doesn't passes the callback function which menu
;; it is invoked.  We need to keep an assoc list of menu id and
;; callback fn.

"static ScmObj menu_fn_assoc = SCM_NIL;
 static void menu_callback(int item)
 {
    int menu = glutGetMenu();
    ScmObj p = Scm_Assoc(SCM_MAKE_INT(menu), menu_fn_assoc, SCM_CMP_EQV);
    if (SCM_PAIRP(p) && SCM_PROCEDUREP(SCM_CDR(p))) {
      Scm_Apply(SCM_CDR(p), SCM_LIST1(SCM_MAKE_INT(item)));
    }
 }"

(define-cproc glut-create-menu (callback::<procedure>)
  "  int menu = glutCreateMenu(menu_callback);
  if (menu >= 0) {
    menu_fn_assoc = Scm_Acons(SCM_MAKE_INT(menu), SCM_OBJ(callback), menu_fn_assoc);
    SCM_RETURN(SCM_MAKE_INT(menu));
  } else {
    SCM_RETURN(SCM_FALSE);
  }")

(define-cproc glut-destroy-menu (menu::<fixnum>)
  "  menu_fn_assoc =
       Scm_AssocDelete(SCM_MAKE_INT(menu), menu_fn_assoc, SCM_CMP_EQV);
  glutDestroyMenu(menu);
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-get-menu ()
  "SCM_RETURN(Scm_MakeInteger(glutGetMenu()));")

(define-cproc glut-set-menu (menu::<fixnum>)
  "glutSetMenu(menu);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-add-menu-entry (label::<string> value::<int>)
  "glutAddMenuEntry(Scm_GetStringConst(label), value);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-add-sub-menu (label::<string> submenu::<int>)
  "glutAddSubMenu(Scm_GetStringConst(label), submenu);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-change-to-menu-entry (item::<int> label::<string>
                                         value::<int>)
  "glutChangeToMenuEntry(item, Scm_GetStringConst(label), value);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-change-to-sub-menu (item::<int> label::<string>
                                       submenu::<int>)
  "glutChangeToSubMenu(item, Scm_GetStringConst(label), submenu);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-remove-menu-item (item::<int>)
  "glutRemoveMenuItem(item);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-attach-menu (button::<int>)
  "glutAttachMenu(button);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-detach-menu (button::<int>)
  "glutDetachMenu(button);
   SCM_RETURN(SCM_UNDEFINED);")

;;========================================================
;; Callbacks
;;

;; GLUT callbacks doesn't allow function to carry closure information,
;; hence static variables.

;; display ---------------
"static ScmObj display_fn = SCM_FALSE;
 static void display_callback()
 {
   if (SCM_PROCEDUREP(display_fn)) {
      Scm_Apply(display_fn, SCM_NIL);
   }
 }"

(define-cproc glut-display-func (fn)
  "  display_fn = fn;
  glutDisplayFunc(display_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; reshape ---------------
"static ScmObj reshape_fn = SCM_FALSE;
 static void reshape_callback(int w, int h)
 {
   if (SCM_PROCEDUREP(reshape_fn)) {
      Scm_Apply(reshape_fn, SCM_LIST2(SCM_MAKE_INT(w), SCM_MAKE_INT(h)));
   }
 }"

(define-cproc glut-reshape-func (fn)
  "  reshape_fn = fn;
  glutReshapeFunc(reshape_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; keyboard ---------------
"static ScmObj keyboard_fn = SCM_FALSE;
 static void keyboard_callback(unsigned char key, int x, int y)
 {
   if (SCM_PROCEDUREP(keyboard_fn)) {
      Scm_Apply(keyboard_fn, SCM_LIST3(SCM_MAKE_INT(key),
                                       SCM_MAKE_INT(x),
                                       SCM_MAKE_INT(y)));
   }
 }"

(define-cproc glut-keyboard-func (fn)
  "  keyboard_fn = fn;
  glutKeyboardFunc(keyboard_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; mouse ---------------
"static ScmObj mouse_fn = SCM_FALSE;
 static void mouse_callback(int button, int state, int x, int y)
 {
   if (SCM_PROCEDUREP(mouse_fn)) {
      Scm_Apply(mouse_fn, SCM_LIST4(SCM_MAKE_INT(button),
                                    SCM_MAKE_INT(state),
                                    SCM_MAKE_INT(x),
                                    SCM_MAKE_INT(y)));
  }
 }"

(define-cproc glut-mouse-func (fn)
  "  mouse_fn = fn;
  glutMouseFunc(mouse_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; motion ---------------
"static ScmObj motion_fn = SCM_FALSE;
 static void motion_callback(int x, int y)
 {
   if (SCM_PROCEDUREP(motion_fn)) {
      Scm_Apply(motion_fn, SCM_LIST2(SCM_MAKE_INT(x),
                                     SCM_MAKE_INT(y)));
   }
 }"

(define-cproc glut-motion-func (fn)
  "  motion_fn = fn;
  glutMotionFunc(motion_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; passiveMotion ---------------
"static ScmObj passive_motion_fn = SCM_FALSE;
 static void passive_motion_callback(int x, int y)
 {
   if (SCM_PROCEDUREP(passive_motion_fn)) {
      Scm_Apply(passive_motion_fn, SCM_LIST2(SCM_MAKE_INT(x),
                                     SCM_MAKE_INT(y)));
   }
 }"

(define-cproc glut-passive-motion-func (fn)
  "  passive_motion_fn = fn;
  glutPassiveMotionFunc(passive_motion_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; Entry ---------------
"static ScmObj entry_fn = SCM_FALSE;
 static void entry_callback(int state)
 {
   if (SCM_PROCEDUREP(entry_fn)) {
      Scm_Apply(entry_fn, SCM_LIST1(SCM_MAKE_INT(state)));
   }
 }"

(define-cproc glut-entry-func (fn)
  "  entry_fn = fn;
  glutEntryFunc(entry_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; Visibility ---------------
"static ScmObj visibility_fn = SCM_FALSE;
 static void visibility_callback(int state)
 {
   if (SCM_PROCEDUREP(visibility_fn)) {
      Scm_Apply(visibility_fn, SCM_LIST1(SCM_MAKE_INT(state)));
   }
 }"

(define-cproc glut-visibility-func (fn)
  "  visibility_fn = fn;
  glutVisibilityFunc(visibility_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; Idle ---------------
"static ScmObj idle_fn = SCM_FALSE;
 static void idle_callback(void)
 {
   if (SCM_PROCEDUREP(idle_fn)) {
      Scm_Apply(idle_fn, SCM_NIL);
   }
 }"

(define-cproc glut-idle-func (fn)
  " idle_fn = fn;
  glutIdleFunc(idle_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; Timer ---------------
"static ScmObj timer_fn = SCM_FALSE;
 static void timer_callback(int value)
 {
   if (SCM_PROCEDUREP(timer_fn)) {
      Scm_Apply(timer_fn, SCM_LIST1(SCM_MAKE_INT(value)));
   }
 }"

(define-cproc glut-timer-func (millis::<int> fn value::<int>)
  "  timer_fn = fn;
  glutTimerFunc(millis, timer_callback, value);
  SCM_RETURN(SCM_UNDEFINED);")

;; MenuState ---------------
"static ScmObj menu_state_fn = SCM_FALSE;
 static void menu_state_callback(int state)
 {
   if (SCM_PROCEDUREP(menu_state_fn)) {
      Scm_Apply(menu_state_fn, SCM_LIST1(SCM_MAKE_INT(state)));
   }
 }"

(define-cproc glut-menu-state-func (fn)
  "  menu_state_fn = fn;
  glutMenuStateFunc(menu_state_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; Special ------------------
"static ScmObj special_fn = SCM_FALSE;
 static void special_callback(int key, int x, int y)
 {
   if (SCM_PROCEDUREP(special_fn)) {
      Scm_Apply(special_fn, SCM_LIST3(SCM_MAKE_INT(key),
                                      SCM_MAKE_INT(x),
                                      SCM_MAKE_INT(y)));
   }
 }"

(define-cproc glut-special-func (fn)
  "  special_fn = fn;
  glutSpecialFunc(special_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; SpaceballMotion -----------
"static ScmObj spaceball_motion_fn = SCM_FALSE;
 static void spaceball_motion_callback(int x, int y, int z)
 {
   if (SCM_PROCEDUREP(spaceball_motion_fn)) {
      Scm_Apply(spaceball_motion_fn, SCM_LIST3(SCM_MAKE_INT(x),
                                               SCM_MAKE_INT(y),
                                               SCM_MAKE_INT(z)));
   }
 }"

(define-cproc glut-spaceball-motion-func (fn)
  "  spaceball_motion_fn = fn;
  glutSpaceballMotionFunc(spaceball_motion_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; SpaceballRotate ----------------------
"static ScmObj spaceball_rotate_fn = SCM_FALSE;
 static void spaceball_rotate_callback(int x, int y, int z)
 {
   if (SCM_PROCEDUREP(spaceball_rotate_fn)) {
      Scm_Apply(spaceball_rotate_fn, SCM_LIST3(SCM_MAKE_INT(x),
                                               SCM_MAKE_INT(y),
                                               SCM_MAKE_INT(z)));
   }
 }"

(define-cproc glut-spaceball-rotate-func (fn)
  "  spaceball_rotate_fn = fn;
  glutSpaceballRotateFunc(spaceball_rotate_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; SpaceballButton ----------------------
"static ScmObj spaceball_button_fn = SCM_FALSE;
 static void spaceball_button_callback(int button, int state)
 {
   if (SCM_PROCEDUREP(spaceball_button_fn)) {
      Scm_Apply(spaceball_button_fn, SCM_LIST2(SCM_MAKE_INT(button),
                                               SCM_MAKE_INT(state)));
   }
 }"

(define-cproc glut-spaceball-button-func (fn)
  "  spaceball_button_fn = fn;
  glutSpaceballButtonFunc(spaceball_button_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; ButtonBox ----------------------------
"static ScmObj button_box_fn = SCM_FALSE;
 static void button_box_callback(int button, int state)
 {
   if (SCM_PROCEDUREP(button_box_fn)) {
      Scm_Apply(button_box_fn, SCM_LIST2(SCM_MAKE_INT(button),
                                         SCM_MAKE_INT(state)));
   }
 }"

(define-cproc glut-button-box-func (fn)
  "  button_box_fn = fn;
  glutButtonBoxFunc(button_box_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; Dials -----------------------------------
"static ScmObj dials_fn = SCM_FALSE;
 static void dials_callback(int button, int state)
 {
   if (SCM_PROCEDUREP(dials_fn)) {
      Scm_Apply(dials_fn, SCM_LIST2(SCM_MAKE_INT(button),
                                    SCM_MAKE_INT(state)));
   }
 }"

(define-cproc glut-dials-func (fn)
  "  dials_fn = fn;
  glutDialsFunc(dials_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; TabletMotion -------------------------
"static ScmObj tablet_motion_fn = SCM_FALSE;
 static void tablet_motion_callback(int x, int y)
 {
   if (SCM_PROCEDUREP(tablet_motion_fn)) {
      Scm_Apply(tablet_motion_fn, SCM_LIST2(SCM_MAKE_INT(x),
                                            SCM_MAKE_INT(y)));
   }
 }"

(define-cproc glut-tablet-motion-func (fn)
  "  tablet_motion_fn = fn;
  glutTabletMotionFunc(tablet_motion_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; TabletButton -------------------------
"static ScmObj tablet_button_fn = SCM_FALSE;
 static void tablet_button_callback(int button, int state, int x, int y)
 {
   if (SCM_PROCEDUREP(tablet_button_fn)) {
      Scm_Apply(tablet_button_fn, SCM_LIST4(SCM_MAKE_INT(button),
                                            SCM_MAKE_INT(state),
                                            SCM_MAKE_INT(x),
                                            SCM_MAKE_INT(y)));
   }
 }"

(define-cproc glut-tablet-button-func (fn)
  "  tablet_button_fn = fn;
  glutTabletButtonFunc(tablet_button_callback);
  SCM_RETURN(SCM_UNDEFINED);")


;; MenuStatus -----------------------------
"static ScmObj menu_status_fn = SCM_FALSE;
 static void menu_status_callback(int state, int x, int y)
 {
   if (SCM_PROCEDUREP(menu_status_fn)) {
      Scm_Apply(menu_status_fn, SCM_LIST3(SCM_MAKE_INT(state),
                                          SCM_MAKE_INT(x),
                                          SCM_MAKE_INT(y)));
   }
 }"

(define-cproc glut-menu-status-func (fn)
  "  menu_status_fn = fn;
  glutMenuStatusFunc(menu_status_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; OverlayDisplay
"static ScmObj overlay_display_fn = SCM_FALSE;
 static void overlay_display_callback(void)
 {
   if (SCM_PROCEDUREP(overlay_display_fn)) {
      Scm_Apply(overlay_display_fn, SCM_NIL);
   }
 }"

(define-cproc glut-ovelay-display-func (fn)
  "  overlay_display_fn = fn;
  glutOverlayDisplayFunc(overlay_display_callback);
  SCM_RETURN(SCM_UNDEFINED);")

;; WindowStatus ---------------------------------
"#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
 static ScmObj window_status_fn = SCM_FALSE;
 static void window_status_callback(int state)
 {
   if (SCM_PROCEDUREP(window_status_fn)) {
      Scm_Apply(window_status_fn, SCM_LIST1(SCM_MAKE_INT(state)));
   }
 }
#endif"

(define-cproc glut-window-status-func (fn)
  "#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
  window_status_fn = fn;
  glutWindowStatusFunc(window_status_callback);
#endif
  SCM_RETURN(SCM_UNDEFINED);")

;; KeyboardUp ----------------------------
"#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)
 static ScmObj keyboard_up_fn = SCM_FALSE;
 static void keyboard_up_callback(unsigned char key, int x, int y)
 {
   if (SCM_PROCEDUREP(keyboard_up_fn)) {
      Scm_Apply(keyboard_up_fn, SCM_LIST3(SCM_MAKE_INT(key),
                                          SCM_MAKE_INT(x),
                                          SCM_MAKE_INT(y)));
   }
 }
#endif"

(define-cproc glut-keyboard-up-func (fn)
  "#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)
  keyboard_up_fn = fn;
  glutKeyboardUpFunc(keyboard_up_callback);
#endif
  SCM_RETURN(SCM_UNDEFINED);")

;; SpecialUp --------------------------------
"#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)
 static ScmObj special_up_fn = SCM_FALSE;
 static void special_up_callback(int key, int x, int y)
 {
   if (SCM_PROCEDUREP(special_up_fn)) {
      Scm_Apply(special_up_fn, SCM_LIST3(SCM_MAKE_INT(key),
                                         SCM_MAKE_INT(x),
                                         SCM_MAKE_INT(y)));
   }
 }
#endif"

(define-cproc glut-special-up-func (fn)
  "#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)
  special_up_fn = fn;
  glutSpecialUpFunc(special_up_callback);
#endif
  SCM_RETURN(SCM_UNDEFINED);")

;; Joystick ------------------------------------
"#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)
 static ScmObj joystick_fn = SCM_FALSE;
 static void joystick_callback(unsigned int mask, int x, int y, int z)
 {
   if (SCM_PROCEDUREP(joystick_fn)) {
      Scm_Apply(joystick_fn, SCM_LIST4(Scm_MakeIntegerFromUI(mask),
                                       SCM_MAKE_INT(x),
                                       SCM_MAKE_INT(y),
                                       SCM_MAKE_INT(z)));
   }
 }
#endif"

(define-cproc glut-joystick-func (fn interval::<int>)
  "#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)
  joystick_fn = fn;
  glutJoystickFunc(joystick_callback, interval);
#endif
  SCM_RETURN(SCM_UNDEFINED);")

;;========================================================
;; Colormap
;;

(define-cproc glut-set-color (index::<int> r::<float> g::<float> b::<float>)
  (return <void> "glutSetColor"))

(define-cproc glut-get-color (index::<int> component::<fixnum>)
  "SCM_RETURN(Scm_MakeFlonum((double)glutGetColor(index, component)));")

(define-cproc glut-copy-colormap (win::<int>)
  "glutCopyColormap(win);
   SCM_RETURN(SCM_UNDEFINED);")

;;========================================================
;; state retrieval
;;

(define-cproc glut-get (type::<int>)
  "SCM_RETURN(Scm_MakeInteger(glutGet(type)));")

(define-cproc glut-device-get (type::<int>)
  "SCM_RETURN(Scm_MakeInteger(glutDeviceGet(type)));")

(define-cproc glut-extension-supported (name::<string>)
  "#if (GLUT_API_VERSION >= 2)
   SCM_RETURN(SCM_MAKE_BOOL(glutExtensionSupported(Scm_GetStringConst(name))));
#else
   SCM_RETURN(SCM_FALSE);
#endif")

(define-cproc glut-get-modifiers ()
  "#if (GLUT_API_VERSION >= 3)
   SCM_RETURN(Scm_MakeInteger(glutGetModifiers()));
#else
   SCM_RETURN(SCM_MAKE_INT(0));
#endif")

(define-cproc glut-layer-get (type::<int>)
  "#if (GLUT_API_VERSION >= 3)
   SCM_RETURN(Scm_MakeInteger(glutLayerGet(type)));
#else
   SCM_RETURN(SCM_MAKE_INT(0));
#endif")

;;========================================================
;; Font
;;

(define-type <glut-font> "ScmGlutFont*" #f
  "SCM_GLUT_FONT_P" "SCM_GLUT_FONT")

(define-cproc glut-bitmap-character (font::<glut-font> character::<int>)
  "glutBitmapCharacter(font->font, character);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-bitmap-width (font::<glut-font> character::<int>)
  "SCM_RETURN(Scm_MakeInteger(glutBitmapWidth(font->font, character)));")

(define-cproc glut-stroke-character (font::<glut-font> character::<int>)
  "glutStrokeCharacter(font->font, character);
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc glut-stroke-width (font::<glut-font> character::<int>)
  "SCM_RETURN(Scm_MakeInteger(glutStrokeWidth(font->font, character)));")

(define-cproc glut-bitmap-length (font::<glut-font> string::<string>)
  "#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
  SCM_RETURN(Scm_MakeInteger(glutBitmapLength(font->font,
                                              (const unsigned char*)Scm_GetStringConst(string))));
#else
  SCM_RETURN(SCM_MAKE_INT(0));
#endif")

(define-cproc glut-stroke-length (font::<glut-font> string::<string>)
  "#if (GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)
  SCM_RETURN(Scm_MakeInteger(glutStrokeLength(font->font,
                                              (const unsigned char*)Scm_GetStringConst(string))));
#else
  SCM_RETURN(SCM_MAKE_INT(0));
#endif")

;;========================================================
;; pre-built models
;;

(define-cproc glut-wire-sphere (radius::<real> slices::<int> stacks::<int>)
  (return <void> "glutWireSphere"))

(define-cproc glut-solid-sphere (radius::<real> slices::<int> stacks::<int>)
  (return <void> "glutSolidSphere"))

(define-cproc glut-wire-cone (radius::<real> height::<real>
                              slices::<int> stacks::<int>)
  (return <void> "glutWireCone"))

(define-cproc glut-solid-cone (radius::<real> height::<real>
                               slices::<int> stacks::<int>)
  (return <void> "glutSolidCone"))

(define-cproc glut-wire-cube (size::<real>)
  (return <void> "glutWireCube"))

(define-cproc glut-solid-cube (size::<real>)
  (return <void> "glutSolidCube"))

(define-cproc glut-wire-torus (inner::<real> outer::<real>
                               sides::<int> rings::<int>)
  (return <void> "glutWireTorus"))

(define-cproc glut-solid-torus (inner::<real> outer::<real>
                                sides::<int> rings::<int>)
  (return <void> "glutSolidTorus"))

(define-cproc glut-wire-dodecahedron ()
  (return <void> "glutWireDodecahedron"))

(define-cproc glut-solid-dodecahedron ()
  (return <void> "glutSolidDodecahedron"))

(define-cproc glut-wire-teapot (size::<real>)
  (return <void> "glutWireTeapot"))

(define-cproc glut-solid-teapot (size::<real>)
  (return <void> "glutSolidTeapot"))

(define-cproc glut-wire-octahedron ()
  (return <void> "glutWireOctahedron"))

(define-cproc glut-solid-octahedron ()
  (return <void> "glutSolidOctahedron"))

(define-cproc glut-wire-tetrahedron ()
  (return <void> "glutWireTetrahedron"))

(define-cproc glut-solid-tetrahedron ()
  (return <void> "glutSolidTetrahedron"))

(define-cproc glut-wire-icosahedron ()
  (return <void> "glutWireIcosahedron"))

(define-cproc glut-solid-icosahedron ()
  (return <void> "glutSolidIcosahedron"))

;;========================================================
;; Video resize
;;

;;========================================================
;; Debug
;;

;;========================================================
;; Device control
;;

;;========================================================
;; Constants
;;

;; Display mode bit masks
(define-enum GLUT_RGB)
(define-enum GLUT_RGBA)
(define-enum GLUT_INDEX)
(define-enum GLUT_SINGLE)
(define-enum GLUT_DOUBLE)
(define-enum GLUT_ACCUM)
(define-enum GLUT_ALPHA)
(define-enum GLUT_DEPTH)
(define-enum GLUT_STENCIL)
(if "(GLUT_API_VERSION >= 2)"
    (begin
      (define-enum GLUT_MULTISAMPLE)
      (define-enum GLUT_STEREO)
      ))
(if "(GLUT_API_VERSION >= 3)"
    (define-enum GLUT_LUMINANCE))

;; Mouse
(define-enum GLUT_LEFT_BUTTON)
(define-enum GLUT_MIDDLE_BUTTON)
(define-enum GLUT_RIGHT_BUTTON)
(define-enum GLUT_DOWN)
(define-enum GLUT_UP)

;; Function Keys
(if "(GLUT_API_VERSION >= 2)"
    (begin
      (define-enum GLUT_KEY_F1)
      (define-enum GLUT_KEY_F2)
      (define-enum GLUT_KEY_F3)
      (define-enum GLUT_KEY_F4)
      (define-enum GLUT_KEY_F5)
      (define-enum GLUT_KEY_F6)
      (define-enum GLUT_KEY_F7)
      (define-enum GLUT_KEY_F8)
      (define-enum GLUT_KEY_F9)
      (define-enum GLUT_KEY_F10)
      (define-enum GLUT_KEY_F11)
      (define-enum GLUT_KEY_F12)
      (define-enum GLUT_KEY_LEFT)
      (define-enum GLUT_KEY_UP)
      (define-enum GLUT_KEY_RIGHT)
      (define-enum GLUT_KEY_DOWN)
      (define-enum GLUT_KEY_PAGE_UP)
      (define-enum GLUT_KEY_PAGE_DOWN)
      (define-enum GLUT_KEY_HOME)
      (define-enum GLUT_KEY_END)
      (define-enum GLUT_KEY_INSERT)
      ))

;; Entry/exit  state.
(define-enum GLUT_LEFT)
(define-enum GLUT_ENTERED)

;; Menu usage  state.
(define-enum GLUT_MENU_NOT_IN_USE)
(define-enum GLUT_MENU_IN_USE)

;; Visibility  state.
(define-enum GLUT_NOT_VISIBLE)
(define-enum GLUT_VISIBLE)

;; Window status  state.
(define-enum GLUT_HIDDEN)
(define-enum GLUT_FULLY_RETAINED)
(define-enum GLUT_PARTIALLY_RETAINED)
(define-enum GLUT_FULLY_COVERED)

;; Color index component selection values
(define-enum GLUT_RED)
(define-enum GLUT_GREEN)
(define-enum GLUT_BLUE)

;; Layers for use
(define-enum GLUT_NORMAL)
(define-enum GLUT_OVERLAY)

;; glutGet parameters
(define-enum GLUT_WINDOW_X)
(define-enum GLUT_WINDOW_Y)
(define-enum GLUT_WINDOW_WIDTH)
(define-enum GLUT_WINDOW_HEIGHT)
(define-enum GLUT_WINDOW_BUFFER_SIZE)
(define-enum GLUT_WINDOW_STENCIL_SIZE)
(define-enum GLUT_WINDOW_DEPTH_SIZE)
(define-enum GLUT_WINDOW_RED_SIZE)
(define-enum GLUT_WINDOW_GREEN_SIZE)
(define-enum GLUT_WINDOW_BLUE_SIZE)
(define-enum GLUT_WINDOW_ALPHA_SIZE)
(define-enum GLUT_WINDOW_ACCUM_RED_SIZE)
(define-enum GLUT_WINDOW_ACCUM_GREEN_SIZE)
(define-enum GLUT_WINDOW_ACCUM_BLUE_SIZE)
(define-enum GLUT_WINDOW_ACCUM_ALPHA_SIZE)
(define-enum GLUT_WINDOW_DOUBLEBUFFER)
(define-enum GLUT_WINDOW_RGBA)
(define-enum GLUT_WINDOW_PARENT)
(define-enum GLUT_WINDOW_NUM_CHILDREN)
(define-enum GLUT_WINDOW_COLORMAP_SIZE)
(if "(GLUT_API_VERSION >= 2)"
    (begin
      (define-enum GLUT_WINDOW_NUM_SAMPLES)
      (define-enum GLUT_WINDOW_STEREO)
      ))
(if "(GLUT_API_VERSION >= 3)"
    (begin
      (define-enum GLUT_WINDOW_CURSOR)
      ))
(define-enum GLUT_SCREEN_WIDTH)
(define-enum GLUT_SCREEN_HEIGHT)
(define-enum GLUT_SCREEN_WIDTH_MM)
(define-enum GLUT_SCREEN_HEIGHT_MM)
(define-enum GLUT_MENU_NUM_ITEMS)
(define-enum GLUT_DISPLAY_MODE_POSSIBLE)
(define-enum GLUT_INIT_WINDOW_X)
(define-enum GLUT_INIT_WINDOW_Y)
(define-enum GLUT_INIT_WINDOW_WIDTH)
(define-enum GLUT_INIT_WINDOW_HEIGHT)
(define-enum GLUT_INIT_DISPLAY_MODE)
(if "(GLUT_API_VERSION >= 2)"
    (define-enum GLUT_ELAPSED_TIME)
    )
(if "(GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)"
    (define-enum GLUT_WINDOW_FORMAT_ID)
    )

;; glutDeviceGet parameters
(if "(GLUT_API_VERSION >= 2)"
    (begin
      (define-enum GLUT_HAS_KEYBOARD)
      (define-enum GLUT_HAS_MOUSE)
      (define-enum GLUT_HAS_SPACEBALL)
      (define-enum GLUT_HAS_DIAL_AND_BUTTON_BOX)
      (define-enum GLUT_HAS_TABLET)
      (define-enum GLUT_NUM_MOUSE_BUTTONS)
      (define-enum GLUT_NUM_SPACEBALL_BUTTONS)
      (define-enum GLUT_NUM_BUTTON_BOX_BUTTONS)
      (define-enum GLUT_NUM_DIALS)
      (define-enum GLUT_NUM_TABLET_BUTTONS)
      ))
(if "(GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 13)"
    (begin
      (define-enum GLUT_DEVICE_IGNORE_KEY_REPEAT)
      (define-enum GLUT_DEVICE_KEY_REPEAT)
      (define-enum GLUT_HAS_JOYSTICK)
      (define-enum GLUT_OWNS_JOYSTICK)
      (define-enum GLUT_JOYSTICK_BUTTONS)
      (define-enum GLUT_JOYSTICK_AXES)
      (define-enum GLUT_JOYSTICK_POLL_RATE)
      ))

;; glutLayerGet parameters.
(if "(GLUT_API_VERSION >= 3)"
    (begin
      (define-enum GLUT_OVERLAY_POSSIBLE)
      (define-enum GLUT_LAYER_IN_USE)
      (define-enum GLUT_HAS_OVERLAY)
      (define-enum GLUT_TRANSPARENT_INDEX)
      (define-enum GLUT_NORMAL_DAMAGED)
      (define-enum GLUT_OVERLAY_DAMAGED)
      ))

;; glutVideoResizeGet parameters
(if "(GLUT_API_VERSION >= 4 || GLUT_XLIB_IMPLEMENTATION >= 9)"
    (begin
      (define-enum GLUT_VIDEO_RESIZE_POSSIBLE)
      (define-enum GLUT_VIDEO_RESIZE_IN_USE)
      (define-enum GLUT_VIDEO_RESIZE_X_DELTA)
      (define-enum GLUT_VIDEO_RESIZE_Y_DELTA)
      (define-enum GLUT_VIDEO_RESIZE_WIDTH_DELTA)
      (define-enum GLUT_VIDEO_RESIZE_HEIGHT_DELTA)
      (define-enum GLUT_VIDEO_RESIZE_X)
      (define-enum GLUT_VIDEO_RESIZE_Y)
      (define-enum GLUT_VIDEO_RESIZE_WIDTH)
      (define-enum GLUT_VIDEO_RESIZE_HEIGHT)
      ))

;; glutGetModifiers return mask
(if "(GLUT_API_VERSION >= 3)"
    (begin
      (define-enum GLUT_ACTIVE_SHIFT)
      (define-enum GLUT_ACTIVE_CTRL)
      (define-enum GLUT_ACTIVE_ALT)
      ))

;; glutSetCursor parameters
(if "(GLUT_API_VERSION >= 3)"
    (begin
      ;;  Basic arrows
      (define-enum GLUT_CURSOR_RIGHT_ARROW)
      (define-enum GLUT_CURSOR_LEFT_ARROW)
      ;;  Symbolic cursor shapes
      (define-enum GLUT_CURSOR_INFO)
      (define-enum GLUT_CURSOR_DESTROY)
      (define-enum GLUT_CURSOR_HELP)
      (define-enum GLUT_CURSOR_CYCLE)
      (define-enum GLUT_CURSOR_SPRAY)
      (define-enum GLUT_CURSOR_WAIT)
      (define-enum GLUT_CURSOR_TEXT)
      (define-enum GLUT_CURSOR_CROSSHAIR)
      ;;   Directional cursors
      (define-enum GLUT_CURSOR_UP_DOWN)
      (define-enum GLUT_CURSOR_LEFT_RIGHT)
      ;;   Sizing cursors
      (define-enum GLUT_CURSOR_TOP_SIDE)
      (define-enum GLUT_CURSOR_BOTTOM_SIDE)
      (define-enum GLUT_CURSOR_LEFT_SIDE)
      (define-enum GLUT_CURSOR_RIGHT_SIDE)
      (define-enum GLUT_CURSOR_TOP_LEFT_CORNER)
      (define-enum GLUT_CURSOR_TOP_RIGHT_CORNER)
      (define-enum GLUT_CURSOR_BOTTOM_RIGHT_CORNER)
      (define-enum GLUT_CURSOR_BOTTOM_LEFT_CORNER)
      ;;   Inherit from parent window
      (define-enum GLUT_CURSOR_INHERIT)
      ;;   Blank cursor
      (define-enum GLUT_CURSOR_NONE)
      ;;   Fullscreen crosshair (if available)
      (define-enum GLUT_CURSOR_FULL_CROSSHAIR)
      ))

;; Local variables:
;; mode: scheme
;; end:
