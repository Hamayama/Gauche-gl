;; test for gl module

;; Note: this only tests if the gl and glut module is loadable or not.

(use gauche.test)
(add-load-path "../lib")

(test-start "GL")

(test-section "math3d")
(use gl.math3d)
(use gauche.sequence)

(test "vector4f" #t
      (lambda () (vector4f? (vector4f 0 1 2 3))))
(test "vector4f reader" #t
      (lambda () (equal? (vector4f 0 1 2 3) #,(<vector4f> 0 1 2 3))))
(test "vector4f converters" #t
      (lambda ()
        (let1 v (vector4f 0 1 2 3)
          (and (equal? v (list->vector4f '(0 1 2 3)))
               (equal? v (f32vector->vector4f '#f32(0.0 1.0 2.0 3.0)))
               (equal? v (list->vector4f (vector4f->list v)))
               (equal? v (f32vector->vector4f (vector4f->f32vector v)))
               (equal? v (coerce-to <vector4f> '(0 1 2 3)))
               (equal? v (coerce-to <vector4f> '#(0 1 2 3)))
               (equal? v (coerce-to <vector4f> '#f32(0 1 2 3)))
               ))))
(test "vector4f ref" '(0.0 1.0 2.0 3.0)
      (lambda ()
        (let1 v (vector4f 0 1 2 3)
          (map (pa$ vector4f-ref v) '(0 1 2 3)))))
(test "vector4f set" #,(<vector4f> 3.0 2.0 1.0 0.0)
      (lambda ()
        (let1 v (vector4f 0 0 0 0)
          (set! (vector4f-ref v 0) 3.0)
          (set! (vector4f-ref v 1) 2.0)
          (set! (vector4f-ref v 2) 1.0)
          (set! (vector4f-ref v 3) 0.0)
          v)))
(test "vector4f +" #,(<vector4f> 3.0 5.0 7.0 9.0)
      (lambda ()
        (+ #,(<vector4f> 1.0 2.0 3.0 4.0)
           #,(<vector4f> 2.0 3.0 4.0 5.0))))
(test "vector4f +" #,(<vector4f> 1.0 1.0 1.0 1.0)
      (lambda ()
        (+ #,(<vector4f> 1.0 2.0 3.0 4.0)
           #,(<vector4f> 2.0 3.0 4.0 5.0)
           #,(<vector4f> -2.0 -4.0 -6.0 -8.0))))
(test "vector4f -" #,(<vector4f> -1.0 -2.0 -3.0 -4.0)
      (lambda ()
        (- #,(<vector4f> 1.0 2.0 3.0 4.0)
           #,(<vector4f> 2.0 4.0 6.0 8.0))))
(test "vector4f dot" 40.0
      (lambda ()
        (vector4f-dot #,(<vector4f> 1.0 2.0 3.0 4.0)
                      #,(<vector4f> 2.0 3.0 4.0 5.0))))
(test "vector4f cross" #,(<vector4f> -4.0 8.0 -4.0 0.0)
      (lambda ()
        (vector4f-cross #,(<vector4f> 1.0 2.0 3.0 0.0)
                        #,(<vector4f> 5.0 6.0 7.0 0.0))))
(test "vector4f normalize" #,(<vector4f> 0.5 0.5 0.5 0.5)
      (lambda () (vector4f-normalize (vector4f 1 1 1 1))))
(test "vector4f normalize!" #,(<vector4f> 0.5 0.5 0.5 0.5)
      (lambda ()
        (let1 v (vector4f 4 4 4 4)
          (vector4f-normalize! v)
          v)))

(test "point4f" #t
      (lambda () (point4f? (point4f 1 2 3))))
(test "point4f reader" #t
      (lambda () (equal? (point4f 1 2 3) #,(<point4f> 1 2 3))))
(test "point4f converters" #t
      (lambda ()
        (let1 v (point4f 1 2 3)
          (and (equal? v (list->point4f '(1 2 3)))
               (equal? v (list->point4f (point4f->list v)))))))
(test "point4f ref" '(1.0 2.0 3.0)
      (lambda ()
        (let1 v (point4f 1 2 3)
          (map (pa$ point4f-ref v) '(0 1 2)))))
(test "point4f set" #,(<point4f> 3.0 2.0 1.0)
      (lambda ()
        (let1 v (point4f 0 0 0)
          (set! (point4f-ref v 0) 3.0)
          (set! (point4f-ref v 1) 2.0)
          (set! (point4f-ref v 2) 1.0)
          v)))
(test "point4f +" #,(<point4f> 3.0 5.0 7.0)
      (lambda ()
        (+ #,(<point4f> 1.0 2.0 3.0)
           #,(<vector4f> 2.0 3.0 4.0))))
(test "point4f +" #,(<point4f> 1.0 1.0 1.0)
      (lambda ()
        (+ #,(<point4f> 1.0 2.0 3.0)
           #,(<vector4f> 2.0 3.0 4.0)
           #,(<vector4f> -2.0 -4.0 -6.0))))
(test "point4f -" #,(<point4f> -1.0 -2.0 -3.0)
      (lambda ()
        (- #,(<point4f> 1.0 2.0 3.0)
           #,(<vector4f> 2.0 4.0 6.0))))
(test "point4f -" #,(<vector4f> -1.0 -2.0 -3.0)
      (lambda ()
        (- #,(<point4f> 1.0 2.0 3.0)
           #,(<point4f> 2.0 4.0 6.0))))

(test "matrix4f" #,(<matrix4f> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)
      (lambda ()
        (matrix4f 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)))
(test "matrix4f row" 
      '(#,(<vector4f> 0 4 8 2)
        #,(<vector4f> 1 5 9 3)
        #,(<vector4f> 2 6 0 4)
        #,(<vector4f> 3 7 1 5))
      (lambda ()
        (let1 m (matrix4f 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)
          (map (pa$ matrix4f-row m) '(0 1 2 3)))))
(test "matrix4f row set!"
      #,(<matrix4f> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)
      (lambda ()
        (let1 m (make-matrix4f)
          (set! (matrix4f-row m 3) (vector4f 3 7 1 5))
          (set! (matrix4f-row m 2) (vector4f 2 6 0 4))
          (set! (matrix4f-row m 1) (vector4f 1 5 9 3))
          (set! (matrix4f-row m 0) (vector4f 0 4 8 2))
          m)))
(test "matrix4f column" 
      '(#,(<vector4f> 0 1 2 3)
        #,(<vector4f> 4 5 6 7)
        #,(<vector4f> 8 9 0 1)
        #,(<vector4f> 2 3 4 5))
      (lambda ()
        (let1 m (matrix4f 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)
          (map (pa$ matrix4f-column m) '(0 1 2 3)))))
(test "matrix4f column set!"
      #,(<matrix4f> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)
      (lambda ()
        (let1 m (make-matrix4f)
          (set! (matrix4f-column m 3) (vector4f 2 3 4 5))
          (set! (matrix4f-column m 2) (vector4f 8 9 0 1))
          (set! (matrix4f-column m 1) (vector4f 4 5 6 7))
          (set! (matrix4f-column m 0) (vector4f 0 1 2 3))
          m)))

(test-section "gl")
(use gl)

(test-section "glut")
(use gl.glut)

(test-end)

