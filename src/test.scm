;; test for gl module

;; Note: this only tests if the gl and glut module is loadable or not.

(use gauche.test)
(add-load-path "../lib")

(test-start "GL")

(test-section "math3d")
(use gl.math3d)
(use gauche.sequence)

(test "3dvector" #t
      (lambda () (3dvector? (3dvector 0 1 2 3))))
(test "3dvector reader" #t
      (lambda () (equal? (3dvector 0 1 2 3) #,(<3dvector> 0 1 2 3))))
(test "3dvector converters" #t
      (lambda ()
        (let1 v (3dvector 0 1 2 3)
          (and (equal? v (list->3dvector '(0 1 2 3)))
               (equal? v (f32vector->3dvector '#f32(0.0 1.0 2.0 3.0)))
               (equal? v (list->3dvector (3dvector->list v)))
               (equal? v (f32vector->3dvector (3dvector->f32vector v)))
               (equal? v (coerce-to <3dvector> '(0 1 2 3)))
               (equal? v (coerce-to <3dvector> '#(0 1 2 3)))
               (equal? v (coerce-to <3dvector> '#f32(0 1 2 3)))
               ))))
(test "3dvector ref" '(0.0 1.0 2.0 3.0)
      (lambda ()
        (let1 v (3dvector 0 1 2 3)
          (map (pa$ 3dvector-ref v) '(0 1 2 3)))))
(test "3dvector set" #,(<3dvector> 3.0 2.0 1.0 0.0)
      (lambda ()
        (let1 v (3dvector 0 0 0 0)
          (set! (3dvector-ref v 0) 3.0)
          (set! (3dvector-ref v 1) 2.0)
          (set! (3dvector-ref v 2) 1.0)
          (set! (3dvector-ref v 3) 0.0)
          v)))
(test "3dvector +" #,(<3dvector> 3.0 5.0 7.0 9.0)
      (lambda ()
        (+ #,(<3dvector> 1.0 2.0 3.0 4.0)
           #,(<3dvector> 2.0 3.0 4.0 5.0))))
(test "3dvector +" #,(<3dvector> 1.0 1.0 1.0 1.0)
      (lambda ()
        (+ #,(<3dvector> 1.0 2.0 3.0 4.0)
           #,(<3dvector> 2.0 3.0 4.0 5.0)
           #,(<3dvector> -2.0 -4.0 -6.0 -8.0))))
(test "3dvector -" #,(<3dvector> -1.0 -2.0 -3.0 -4.0)
      (lambda ()
        (- #,(<3dvector> 1.0 2.0 3.0 4.0)
           #,(<3dvector> 2.0 4.0 6.0 8.0))))
(test "3dvector dot" 40.0
      (lambda ()
        (3dvector-dot #,(<3dvector> 1.0 2.0 3.0 4.0)
                      #,(<3dvector> 2.0 3.0 4.0 5.0))))
(test "3dvector cross" #,(<3dvector> -4.0 8.0 -4.0 0.0)
      (lambda ()
        (3dvector-cross #,(<3dvector> 1.0 2.0 3.0 0.0)
                        #,(<3dvector> 5.0 6.0 7.0 0.0))))
(test "3dvector normalize" #,(<3dvector> 0.5 0.5 0.5 0.5)
      (lambda () (3dvector-normalize (3dvector 1 1 1 1))))
(test "3dvector normalize!" #,(<3dvector> 0.5 0.5 0.5 0.5)
      (lambda ()
        (let1 v (3dvector 4 4 4 4)
          (3dvector-normalize! v)
          v)))

(test "3dpoint" #t
      (lambda () (3dpoint? (3dpoint 1 2 3))))
(test "3dpoint reader" #t
      (lambda () (equal? (3dpoint 1 2 3) #,(<3dpoint> 1 2 3))))
(test "3dpoint converters" #t
      (lambda ()
        (let1 v (3dpoint 1 2 3)
          (and (equal? v (list->3dpoint '(1 2 3)))
               (equal? v (list->3dpoint (3dpoint->list v)))))))
(test "3dpoint ref" '(1.0 2.0 3.0)
      (lambda ()
        (let1 v (3dpoint 1 2 3)
          (map (pa$ 3dpoint-ref v) '(0 1 2)))))
(test "3dpoint set" #,(<3dpoint> 3.0 2.0 1.0)
      (lambda ()
        (let1 v (3dpoint 0 0 0)
          (set! (3dpoint-ref v 0) 3.0)
          (set! (3dpoint-ref v 1) 2.0)
          (set! (3dpoint-ref v 2) 1.0)
          v)))
(test "3dpoint +" #,(<3dpoint> 3.0 5.0 7.0)
      (lambda ()
        (+ #,(<3dpoint> 1.0 2.0 3.0)
           #,(<3dvector> 2.0 3.0 4.0))))
(test "3dpoint +" #,(<3dpoint> 1.0 1.0 1.0)
      (lambda ()
        (+ #,(<3dpoint> 1.0 2.0 3.0)
           #,(<3dvector> 2.0 3.0 4.0)
           #,(<3dvector> -2.0 -4.0 -6.0))))
(test "3dpoint -" #,(<3dpoint> -1.0 -2.0 -3.0)
      (lambda ()
        (- #,(<3dpoint> 1.0 2.0 3.0)
           #,(<3dvector> 2.0 4.0 6.0))))
(test "3dpoint -" #,(<3dvector> -1.0 -2.0 -3.0)
      (lambda ()
        (- #,(<3dpoint> 1.0 2.0 3.0)
           #,(<3dpoint> 2.0 4.0 6.0))))

(test "3dmatrix" #,(<3dmatrix> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)
      (lambda ()
        (3dmatrix 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)))
(test "3dmatrix row" 
      '(#,(<3dvector> 0 4 8 2)
        #,(<3dvector> 1 5 9 3)
        #,(<3dvector> 2 6 0 4)
        #,(<3dvector> 3 7 1 5))
      (lambda ()
        (let1 m (3dmatrix 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)
          (map (pa$ 3dmatrix-row m) '(0 1 2 3)))))
(test "3dmatrix row set!"
      #,(<3dmatrix> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)
      (lambda ()
        (let1 m (make-3dmatrix)
          (set! (3dmatrix-row m 3) (3dvector 3 7 1 5))
          (set! (3dmatrix-row m 2) (3dvector 2 6 0 4))
          (set! (3dmatrix-row m 1) (3dvector 1 5 9 3))
          (set! (3dmatrix-row m 0) (3dvector 0 4 8 2))
          m)))
(test "3dmatrix column" 
      '(#,(<3dvector> 0 1 2 3)
        #,(<3dvector> 4 5 6 7)
        #,(<3dvector> 8 9 0 1)
        #,(<3dvector> 2 3 4 5))
      (lambda ()
        (let1 m (3dmatrix 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)
          (map (pa$ 3dmatrix-column m) '(0 1 2 3)))))
(test "3dmatrix column set!"
      #,(<3dmatrix> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5)
      (lambda ()
        (let1 m (make-3dmatrix)
          (set! (3dmatrix-column m 3) (3dvector 2 3 4 5))
          (set! (3dmatrix-column m 2) (3dvector 8 9 0 1))
          (set! (3dmatrix-column m 1) (3dvector 4 5 6 7))
          (set! (3dmatrix-column m 0) (3dvector 0 1 2 3))
          m)))

(test-section "gl")
(use gl)

(test-section "glut")
(use gl.glut)

(test-end)

