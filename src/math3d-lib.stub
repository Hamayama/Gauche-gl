;;;
;;; math3d-lib.stub - 3d vector arithmetics
;;;
;;;  Copyright(C) 2002-2003 by Shiro Kawai (shiro@acm.org)
;;;
;;;  Permission to use, copy, modify, distribute this software and
;;;  accompanying documentation for any purpose is hereby granted,
;;;  provided that existing copyright notices are retained in all
;;;  copies and that this notice is included verbatim in all
;;;  distributions.
;;;  This software is provided as is, without express or implied
;;;  warranty.  In no circumstances the author(s) shall be liable
;;;  for any damages arising out of the use of this software.
;;;
;;;  $Id: math3d-lib.stub,v 1.25 2008-06-04 11:01:52 shirok Exp $
;;;

"
#include <math.h>
#include <gauche/uvector.h>
#include \"gauche/math3d.h\"
"

(define-type <vector4f> "ScmVector4f*" #f "SCM_VECTOR4FP" "SCM_VECTOR4F")
(define-type <vector4f-array> "ScmVector4fArray*" #f
  "SCM_VECTOR4F_ARRAY_P" "SCM_VECTOR4F_ARRAY")
(define-type <point4f> "ScmPoint4f*" #f "SCM_POINT4FP" "SCM_POINT4F")
(define-type <point4f-array> "ScmPoint4fArray*" #f
  "SCM_POINT4F_ARRAY_P" "SCM_POINT4F_ARRAY")

(define-type <matrix4f> "ScmMatrix4f*" #f "SCM_MATRIX4FP" "SCM_MATRIX4F")

(define-type <quatf> "ScmQuatf*" #f "SCM_QUATFP" "SCM_QUATF")

(define-type <f32vector> "ScmF32Vector*")

;;================================================================
;; Vector4f
;;

(define-cproc vector4f
  (x::<real> y::<real> z::<real> &optional (w::<real> 0.0))
  (return "Scm_MakeVector4f"))

(define-cproc vector4f? (obj)
  (return <boolean> "SCM_VECTOR4FP"))

(define-cproc make-vector4f ()
  "SCM_RETURN(Scm_MakeVector4fv(NULL));")

(define-cproc list->vector4f (l::<list>)
  (return "Scm_ListToVector4f"))

(define-cproc vector4f->list (v::<vector4f>)
  (return "Scm_Vector4fToList"))

(define-cproc f32vector->vector4f (v::<f32vector>
                                   &optional (start::<fixnum> 0))
  "int size = SCM_F32VECTOR_SIZE(v);
  if (start < 0 || size-start < 4)
    Scm_Error(\"f32vector too small: %S (start=%d)\", v, start);
  SCM_RETURN(Scm_MakeVector4fv(SCM_F32VECTOR_ELEMENTS(v)+start));")
  
(define-cproc vector4f->f32vector (v::<vector4f>)
  "SCM_RETURN(Scm_MakeF32VectorFromArray(4, SCM_VECTOR4F_D(v)));")

(define-cproc vector4f-copy (v::<vector4f>)
  "SCM_RETURN(Scm_MakeVector4fv(SCM_VECTOR4F_D(v)));")

(define-cproc vector4f-copy! (dst::<vector4f> src::<vector4f>)
  "SCM_RETURN(Scm_Vector4fSetv(dst, SCM_VECTOR4F_D(src)));")

(define-cproc vector4f-set! (x::<vector4f> i::<fixnum> v::<real>)
  "if (i < 0 || i > 3) Scm_Error(\"vector index out of range: %d\", i);
   SCM_VECTOR4F_D(x)[i] = v;
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc vector4f-ref (x::<vector4f> i::<fixnum> &optional fallback)
  "if (i < 0 || i > 3) {
     if (SCM_UNBOUNDP(fallback)) {
         Scm_Error(\"vector index out of range: %d\", i);
     }
     SCM_RETURN(fallback);
  }
  SCM_RETURN(Scm_MakeFlonum(SCM_VECTOR4F_REF(x, i)));"
  (setter vector4f-set!))

(define-cproc vector4f-dot (x::<vector4f> y::<vector4f>)
  (return <float> "Scm_Vector4fDot"))

(define-cproc vector4f-cross (x::<vector4f> y::<vector4f>)
  (return "Scm_Vector4fCross"))

(define-cproc vector4f-norm (v::<vector4f>)
  (expr <real> (SCM_VECTOR4F_NORMV (SCM_VECTOR4F_D v))))

(define-cproc vector4f-normalize (x::<vector4f>)
  (return "Scm_Vector4fNormalize"))

(define-cproc vector4f-normalize! (x::<vector4f>)
  (return "Scm_Vector4fNormalizeX"))

(define-cproc vector4f-add (x::<vector4f> y::<vector4f>)
  (return "Scm_Vector4fAdd"))

(define-cproc vector4f-add! (x::<vector4f> y::<vector4f>)
  "Scm_Vector4fAddv(SCM_VECTOR4F_D(x), SCM_VECTOR4F_D(x), SCM_VECTOR4F_D(y));
  SCM_RETURN(SCM_OBJ(x));")

(define-cproc vector4f-sub (x::<vector4f> y::<vector4f>)
  (call "Scm_Vector4fSub"))

(define-cproc vector4f-sub! (x::<vector4f> y::<vector4f>)
  "Scm_Vector4fSubv(SCM_VECTOR4F_D(x), SCM_VECTOR4F_D(x), SCM_VECTOR4F_D(y));
  SCM_RETURN(SCM_OBJ(x));")


;; VectorArray --------------------------------------------------

(define-cproc make-vector4f-array (len::<fixnum> &optional init)
  "ScmObj va = SCM_FALSE;
  if (len < 0) Scm_Error(\"vector4f-array length must be positive: %d\", len);
  if (SCM_VECTOR4FP(init)) {
    va = Scm_MakeVector4fArrayv(len, SCM_VECTOR4F_D(init));
  } else if (SCM_UNBOUNDP(init)) {
    va = Scm_MakeVector4fArrayv(len, NULL);
  } else {
    Scm_Error(\"bad initializer for vector array: must be <vector4f>, but got %S\", init);
  }
  SCM_RETURN(va);")

(define-cproc vector4f-array? (obj)
  (return <boolean> "SCM_VECTOR4F_ARRAY_P"))

(define-cproc vector4f-array-length (v::<vector4f-array>)
  (return <fixnum> "SCM_VECTOR4F_ARRAY_SIZE"))

(define-cproc f32vector->vector4f-array/shared (v::<f32vector>)
  (return "Scm_MakeVector4fArrayV"))

(define-cproc vector4f-array->f32vector (a::<vector4f-array>)
  "SCM_RETURN(Scm_MakeF32VectorFromArray(SCM_VECTOR4F_ARRAY_SIZE(a)*4,
                                         SCM_VECTOR4F_ARRAY_D(a)));")

(define-cproc vector4f-array-set! (a::<vector4f-array>
                                   i::<fixnum> x::<vector4f>)
  (return <void> "Scm_Vector4fArraySet"))

(define-cproc vector4f-array-ref (a::<vector4f-array>
                                  i::<fixnum> &optional fallback)
  (return "Scm_Vector4fArrayRef")
  (setter vector4f-array-set!))

(define-cproc vector4f-array-ref/shared (a::<vector4f-array>
                                         i::<fixnum> &optional fallback)
  (return "Scm_Vector4fArrayRefShared"))

;; point4f ------------------------------------------------------

(define-cproc point4f (x::<real> y::<real> z::<real> &optional (w::<real> 1.0))
  (return "Scm_MakePoint4f"))

(define-cproc point4f? (obj)
  (return <boolean> "SCM_POINT4FP"))

(define-cproc make-point4f ()
  "SCM_RETURN(Scm_MakePoint4fv(NULL));")

(define-cproc list->point4f (l::<list>)
  (return "Scm_ListToPoint4f"))

(define-cproc point4f->list (x::<point4f>)
  (return "Scm_Point4fToList"))

(define-cproc f32vector->point4f (v::<f32vector> &optional (start::<fixnum> 0))
  "int size = SCM_F32VECTOR_SIZE(v);
  if (start < 0 || size-start < 4)
    Scm_Error(\"f32vector too small: %S (start=%d)\", v, start);
  SCM_RETURN(Scm_MakePoint4fv(SCM_F32VECTOR_ELEMENTS(v)+start));")
  
(define-cproc point4f->f32vector (v::<point4f>)
  "SCM_RETURN(Scm_MakeF32VectorFromArray(4, SCM_POINT4F_D(v)));")

(define-cproc point4f-copy (v::<point4f>)
  "SCM_RETURN(Scm_MakePoint4fv(SCM_POINT4F_D(v)));")

(define-cproc point4f-copy! (dst::<point4f> src::<point4f>)
  "SCM_RETURN(Scm_Point4fSetv(dst, SCM_POINT4F_D(src)));")

(define-cproc point4f-set! (x::<point4f> i::<fixnum> v::<real>)
  "if (i < 0 || i > 3) Scm_Error(\"point index out of range: %d\", i);
   SCM_POINT4F_D(x)[i] = v;
   SCM_RETURN(SCM_UNDEFINED);")

(define-cproc point4f-ref (x::<point4f> i::<fixnum>)
  "if (i < 0 || i > 3) Scm_Error(\"vpoint index out of range: %d\", i);
  SCM_RETURN(Scm_MakeFlonum(SCM_POINT4F_REF(x, i)));"
  (setter point4f-set!))

(define-cproc point4f-add (x::<point4f> y::<vector4f>)
  (return "Scm_Point4fAdd"))

(define-cproc point4f-add! (x::<point4f> y::<vector4f>)
  "Scm_Vector4fAddv(SCM_POINT4F_D(x), SCM_POINT4F_D(x), SCM_VECTOR4F_D(y));
  SCM_RETURN(SCM_OBJ(x));")

(define-cproc point4f-sub (x::<point4f> y)
  (return "Scm_Point4fSub"))

;point4f-sub!

;; Point4fArray ---------------------------------------------------

(define-cproc make-point4f-array (len::<fixnum> &optional init)
  "ScmObj va = SCM_FALSE;
  if (len < 0) Scm_Error(\"point4f-array length must be positive: %d\", len);
  if (SCM_POINT4FP(init)) {
    va = Scm_MakePoint4fArrayv(len, SCM_POINT4F_D(init));
  } else if (SCM_UNBOUNDP(init)) {
    va = Scm_MakePoint4fArrayv(len, NULL);
  } else {
    Scm_Error(\"bad initializer for point array: must be <point4f>, but got %S\", init);
  }
  SCM_RETURN(va);")

(define-cproc point4f-array? (obj)
  (return <boolean> "SCM_POINT4F_ARRAY_P"))

(define-cproc point4f-array-length (v::<point4f-array>)
  (return <fixnum> "SCM_POINT4F_ARRAY_SIZE"))

(define-cproc f32vector->point4f-array/shared (v::<f32vector>)
  (return "Scm_MakePoint4fArrayV"))

(define-cproc point4f-array->f32vector (a::<point4f-array>)
  "SCM_RETURN(Scm_MakeF32VectorFromArray(SCM_POINT4F_ARRAY_SIZE(a)*4,
                                         SCM_POINT4F_ARRAY_D(a)));")

(define-cproc point4f-array-set! (a::<point4f-array>
                                  i::<fixnum>
                                  x::<point4f>)
  (return <void> "Scm_Point4fArraySet"))

(define-cproc point4f-array-ref (a::<point4f-array>
                                 i::<fixnum> &optional fallback)
  (return "Scm_Point4fArrayRef")
  (setter point4f-array-set!))

(define-cproc point4f-array-ref/shared (a::<point4f-array>
                                        i::<fixnum> &optional fallback)
  (return "Scm_Point4fArrayRefShared"))

;; Matrix4f -------------------------------------------------------

(define-cproc make-matrix4f (&optional init)
  "if (SCM_UNBOUNDP(init)) {
    static float unit[] = { 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
    SCM_RETURN(Scm_MakeMatrix4fv(unit));
  } else if (!SCM_F32VECTORP(init) || SCM_F32VECTOR_SIZE(init) != 16) {
    Scm_Error(\"f32vector of size 16 required, but got %S\", init);
  }
  SCM_RETURN(Scm_MakeMatrix4fv(SCM_F32VECTOR_ELEMENTS(init)));")

(define-cproc matrix4f (&rest args)
  (return "Scm_ListToMatrix4f"))

(define-cproc matrix4f? (obj)
  (return <boolean> "SCM_MATRIX4FP"))

(define-cproc list->matrix4f (l::<list>)
  (return "Scm_ListToMatrix4f"))
(define-cproc matrix4f->list (m::<matrix4f>)
  (return "Scm_Matrix4fToList"))

(define-cproc f32vector->matrix4f (v::<f32vector>
                                   &optional (start::<fixnum> 0))
  "int size = SCM_F32VECTOR_SIZE(v);
  if (start < 0 || size-start < 16)
    Scm_Error(\"f32vector too small: %S (start=%d)\", v, start);
  SCM_RETURN(Scm_MakeMatrix4fv(SCM_F32VECTOR_ELEMENTS(v)+start));")
(define-cproc matrix4f->f32vector (m::<matrix4f>)
  "SCM_RETURN(Scm_MakeF32VectorFromArray(16, SCM_MATRIX4F_D(m)));")

(define-cproc matrix4f-copy (m::<matrix4f>)
  "SCM_RETURN(Scm_MakeMatrix4fv(SCM_MATRIX4F_D(m)));")
(define-cproc matrix4f-copy! (dst::<matrix4f> src::<matrix4f>)
  "SCM_RETURN(Scm_Matrix4fSetv(dst, SCM_MATRIX4F_D(src)));")

(define-cproc matrix4f-mul (p::<matrix4f> q)
  "if (SCM_MATRIX4FP(q)) SCM_RETURN(Scm_Matrix4fMulMatrix4f(p, SCM_MATRIX4F(q)));
  if (SCM_VECTOR4FP(q)) SCM_RETURN(Scm_Matrix4fMulVector4f(p, SCM_VECTOR4F(q)));
  if (SCM_POINT4FP(q)) SCM_RETURN(Scm_Matrix4fMulPoint4f(p, SCM_POINT4F(q)));
  if (SCM_REALP(q)) SCM_RETURN(Scm_Matrix4fScale(p, Scm_GetDouble(q)));
  Scm_Error(\"bad object, matrix4f, vector4f, point4f or real number required, but got %S\", q);
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc matrix4f-mul! (p::<matrix4f> q::<matrix4f>)
  "float r[16];
  Scm_Matrix4fMulMatrix4fv(r, SCM_MATRIX4F_D(p), SCM_MATRIX4F_D(q));
  Scm_Matrix4fSetv(p, r);
  SCM_RETURN(SCM_OBJ(p));")

(define-cproc matrix4f-transpose (m::<matrix4f>)
  "float r[16];
  Scm_Matrix4fTransposev(r, SCM_MATRIX4F_D(m));
  SCM_RETURN(Scm_MakeMatrix4fv(r));")

(define-cproc matrix4f-transpose! (m::<matrix4f>)
  "float r[16], *p = SCM_MATRIX4F_D(m);
  Scm_Matrix4fTransposev(r, p);
  Scm_Matrix4fSetv(m, r);
  SCM_RETURN(SCM_OBJ(m));")

(define-cproc matrix4f-set! (m::<matrix4f> i::<fixnum> v::<real>)
  "if (i<0 || i>=16) {
    Scm_Error(\"index out of bounds: %d\", i);
  } else {
    SCM_MATRIX4F_D(m)[i] = v;
  }
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc matrix4f-ref (m::<matrix4f> i::<fixnum> &optional fallback)
  "if (i<0 || i>=16) {
    if (SCM_UNBOUNDP(fallback)) Scm_Error(\"index out of bounds: %d\", i);
    SCM_RETURN(fallback);
  } else {
    SCM_RETURN(Scm_MakeFlonum(SCM_MATRIX4F_D(m)[i]));
  }"
  (setter matrix4f-set!))

(define-cproc matrix4f-set2! (m::<matrix4f> i::<fixnum> j::<fixnum> v::<real>)
  "if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
  if (j < 0 || j > 3) Scm_Error(\"index j out of range: %d\", j);
  SCM_MATRIX4F_SET(m, i, j, v);
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc matrix4f-ref2 (m::<matrix4f> i::<fixnum> j::<fixnum>)
  "if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
  if (j < 0 || j > 3) Scm_Error(\"index j out of range: %d\", j);
  SCM_RETURN(Scm_MakeFlonum(SCM_MATRIX4F_REF(m, i, j)));"
  (setter matrix4f-set2!))

(define-cproc matrix4f-row (m::<matrix4f> i::<fixnum>)
  "if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
  SCM_RETURN(Scm_MakeVector4f(SCM_MATRIX4F_REF(m, i, 0),
                              SCM_MATRIX4F_REF(m, i, 1), 
                              SCM_MATRIX4F_REF(m, i, 2),
                              SCM_MATRIX4F_REF(m, i, 3)));"
  (setter (m::<matrix4f> i::<fixnum> v)
    "float *fv;
    if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
    SCM_MATH3D_X4FP(fv, v);
    SCM_MATRIX4F_SET(m, i, 0, fv[0]);
    SCM_MATRIX4F_SET(m, i, 1, fv[1]);
    SCM_MATRIX4F_SET(m, i, 2, fv[2]);
    SCM_MATRIX4F_SET(m, i, 3, fv[3]);
    SCM_RETURN(SCM_UNDEFINED);")
  )

(define-cproc matrix4f-column (m::<matrix4f> i::<fixnum>)
  "if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
  SCM_RETURN(Scm_MakeVector4fv(SCM_MATRIX4F_COLVEC(m, i)));"
  (setter (m::<matrix4f> i::<fixnum> v)
    "float *fv;
    if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
    SCM_MATH3D_X4FP(fv, v);
    SCM_MATRIX4F_SET(m, 0, i, fv[0]);
    SCM_MATRIX4F_SET(m, 1, i, fv[1]);
    SCM_MATRIX4F_SET(m, 2, i, fv[2]);
    SCM_MATRIX4F_SET(m, 3, i, fv[3]);
    SCM_RETURN(SCM_UNDEFINED);")
  )

(define-cproc matrix4f-column/shared (m::<matrix4f> i::<fixnum>)
  "if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
  SCM_RETURN(Scm_MakeVector4fvShared(SCM_MATRIX4F_COLVEC(m, i)));")

;; determinant and inverse
(define-cproc matrix4f-determinant (m::<matrix4f>)
  "SCM_RETURN(Scm_MakeFlonum((double)Scm_Matrix4fDeterminantv(SCM_MATRIX4F_D(m))));")

(define-cproc matrix4f-inverse (m::<matrix4f> &optional (error-on-singular #t))
  "int code;  ScmObj r = Scm_MakeMatrix4fv(NULL);
  code = Scm_Matrix4fInversev(SCM_MATRIX4F_D(r), SCM_MATRIX4F_D(m));
  if (!SCM_FALSEP(error_on_singular) && !code) {
    Scm_Error(\"attempt to inverse singular matrix: %S\", m);
  }
  if (code) SCM_RETURN(r);
  else      SCM_RETURN(SCM_FALSE);")

(define-cproc matrix4f-inverse! (m::<matrix4f> &optional (error-on-singular #t))
  "int code, i;  float r[16];
  code = Scm_Matrix4fInversev(r, SCM_MATRIX4F_D(m));
  if (!SCM_FALSEP(error_on_singular) && !code) {
    Scm_Error(\"attempt to inverse singular matrix: %S\", m);
  }
  if (code) { 
    for (i=0; i<16; i++) SCM_MATRIX4F_D(m)[i] = r[i];
    SCM_RETURN(SCM_OBJ(m));
  } else { 
    SCM_RETURN(SCM_FALSE);
  }")

;; basic transformation

(define-cproc translation->matrix4f (t)
  "float r[16], *p;
  SCM_MATH3D_X3FP(p, t);
  Scm_TranslationToMatrix4fv(r, p);
  SCM_RETURN(Scm_MakeMatrix4fv(r));")
(define-cproc translation->matrix4f! (m::<matrix4f> t)
  "float *p;
  SCM_MATH3D_X3FP(p, t);
  Scm_TranslationToMatrix4fv(SCM_MATRIX4F_D(m), p);
  SCM_RETURN(SCM_OBJ(m));")

(define-cproc rotation->matrix4f (v angle::<real>)
  "float r[16], *p;
  SCM_MATH3D_X3FP(p, v);
  Scm_RotationToMatrix4fv(r, p, angle);
  SCM_RETURN(Scm_MakeMatrix4fv(r));")
(define-cproc rotation->matrix4f! (m::<matrix4f> v angle::<real>)
  "float *p;
  SCM_MATH3D_X3FP(p, v);
  Scm_RotationToMatrix4fv(SCM_MATRIX4F_D(m), p, angle);
  SCM_RETURN(SCM_OBJ(m));")

(define-cproc scale->matrix4f (s)
  "float r[16], *p = NULL;
  SCM_MATH3D_X3FP(p, s);
  Scm_ScaleToMatrix4fv(r, p);
  SCM_RETURN(Scm_MakeMatrix4fv(r));")
(define-cproc scale->matrix4f! (m::<matrix4f> s)
  "float *p;
  SCM_MATH3D_X3FP(p, s);
  Scm_ScaleToMatrix4fv(SCM_MATRIX4F_D(m), p);
  SCM_RETURN(SCM_OBJ(m));")

(define-cproc trs->matrix4f (t v angle::<real> s)
  "float r[16], *pt, *pv, *ps;
  SCM_MATH3D_X3FP(pt, t);
  SCM_MATH3D_X3FP(pv, v);
  SCM_MATH3D_X3FP(ps, s);
  Scm_TRSToMatrix4fv(r, pt, pv, angle, ps);
  SCM_RETURN(Scm_MakeMatrix4fv(r));")
(define-cproc trs->matrix4f! (m::<matrix4f> t v angle::<real> s)
  "float *pt, *pv, *ps;
  SCM_MATH3D_X3FP(pt, t);
  SCM_MATH3D_X3FP(pv, v);
  SCM_MATH3D_X3FP(ps, s);
  Scm_TRSToMatrix4fv(SCM_MATRIX4F_D(m), pt, pv, angle, ps);
  SCM_RETURN(SCM_OBJ(m));")

(define-cproc tqs->matrix4f (t q s)
  "float r[16], *pt, *pq, *ps;
  SCM_MATH3D_X3FP(pt, t);
  SCM_MATH3D_X4FP(pq, q);
  SCM_MATH3D_X3FP(ps, s);
  Scm_TQSToMatrix4fv(r, pt, pq, ps);
  SCM_RETURN(Scm_MakeMatrix4fv(r));")
(define-cproc tqs->matrix4f! (m::<matrix4f> t q s)
  "float *pt, *pq, *ps;
  SCM_MATH3D_X3FP(pt, t);
  SCM_MATH3D_X4FP(pq, q);
  SCM_MATH3D_X3FP(ps, s);
  Scm_TQSToMatrix4fv(SCM_MATRIX4F_D(m), pt, pq, ps);
  SCM_RETURN(SCM_OBJ(m));")

(define-symbol xyz "sym_xyz")
(define-symbol xzy "sym_xzy")
(define-symbol yzx "sym_yzx")
(define-symbol yxz "sym_yxz")
(define-symbol zxy "sym_zxy")
(define-symbol zyx "sym_zyx")

"static int rotation_order(ScmObj sym)
 {
   if (SCM_UNBOUNDP(sym)) return SCM_MATH3D_ROTATE_XYZ; /* default */
   if (SCM_EQ(sym, sym_xyz)) return SCM_MATH3D_ROTATE_XYZ;
   if (SCM_EQ(sym, sym_xzy)) return SCM_MATH3D_ROTATE_XZY;
   if (SCM_EQ(sym, sym_yzx)) return SCM_MATH3D_ROTATE_YZX;
   if (SCM_EQ(sym, sym_yxz)) return SCM_MATH3D_ROTATE_YXZ;
   if (SCM_EQ(sym, sym_zxy)) return SCM_MATH3D_ROTATE_ZXY;
   if (SCM_EQ(sym, sym_zyx)) return SCM_MATH3D_ROTATE_ZYX;
   Scm_Error(\"bad rotation order: must be either one of xyz, xzy, yzx, yxz, zxy, or zyx, but got %S\", sym);
   return 0; /* dummy */
 }"

(define-cproc euler-angle->matrix4f (x::<real> y::<real> z::<real>
                                     &optional order)
  "float m[16];
  Scm_EulerToMatrix4fv(m, (float)x, (float)y, (float)z,
                       rotation_order(order));
  SCM_RETURN(Scm_MakeMatrix4fv(m));")

(define-cproc euler-angle->matrix4f! (m::<matrix4f>
                                      x::<real> y::<real> z::<real>
                                     &optional order)
  (body <void>
        "Scm_EulerToMatrix4fv(SCM_MATRIX4F_D(m), (float)x, (float)y, (float)z,
                              rotation_order(order));"))


(define-cproc matrix4f-decompose (m::<matrix4f>)
  "float T[4], S[4], H[4], R[16]; int r;
  r = Scm_Matrix4fDecomposev(SCM_MATRIX4F_D(m), T, R, H, S);
  SCM_RETURN(Scm_Values5(SCM_MAKE_BOOL(r),
                         Scm_MakeVector4fv(T),
                         Scm_MakeMatrix4fv(R),
                         Scm_MakeVector4fv(H),
                         Scm_MakeVector4fv(S)));")

(define-cproc matrix4f-decompose! (m::<matrix4f> T::<vector4f> R::<matrix4f>
                                   H::<vector4f> S::<vector4f>)
  "int r;
  r = Scm_Matrix4fDecomposev(SCM_MATRIX4F_D(m), 
                             SCM_VECTOR4F_D(T),
                             SCM_MATRIX4F_D(R),
                             SCM_VECTOR4F_D(H),
                             SCM_VECTOR4F_D(S));
  SCM_RETURN(SCM_MAKE_BOOL(r));")

(define-cproc matrix4f->translation (m::<matrix4f>)
  (body <top>
        (result (Scm_MakeVector4f (aref (SCM_MATRIX4F_D m) 12)
                                  (aref (SCM_MATRIX4F_D m) 13)
                                  (aref (SCM_MATRIX4F_D m) 14)
                                  0.0))))

(define-cproc matrix4f->translation! (m::<matrix4f> v::<vector4f>)
  (body <top>
        (set! (SCM_VECTOR4F_REF v 0) (aref (SCM_MATRIX4F_D m) 12))
        (set! (SCM_VECTOR4F_REF v 1) (aref (SCM_MATRIX4F_D m) 13))
        (set! (SCM_VECTOR4F_REF v 2) (aref (SCM_MATRIX4F_D m) 14))
        (set! (SCM_VECTOR4F_REF v 3) 0.0)
        (result v)))

(define-cproc matrix4f->rotation (m::<matrix4f>)
  "float v[4];
  float angle = Scm_Matrix4fToRotationv(SCM_MATRIX4F_D(m), v);
  SCM_RETURN(Scm_Values2(Scm_MakeVector4fv(v), Scm_MakeFlonum((double)angle)));")

(define-cproc matrix4f->rotation! (m::<matrix4f> v::<vector4f>)
  "float angle = Scm_Matrix4fToRotationv(SCM_MATRIX4F_D(m),
                                         SCM_VECTOR4F_D(v));
  SCM_RETURN(Scm_Values2(SCM_OBJ(v), Scm_MakeFlonum((double)angle)));")

;; Quatf ----------------------------------------------------

(define-cproc quatf (x::<real> y::<real> z::<real> w::<real>)
  (return "Scm_MakeQuatf"))

(define-cproc quatf? (obj)
  (return <boolean> "SCM_QUATFP"))

(define-cproc make-quatf (&optional vec (angle::<real> 0))
  "if (SCM_UNBOUNDP(vec)) {
    SCM_RETURN(Scm_MakeQuatf(0.0, 0.0, 0.0, 1.0));
  } else {
    float *q;
    double sint, cost;
    SCM_MATH3D_X3FP(q, vec);
    sint = sin(angle/2.0);
    cost = cos(angle/2.0);
    SCM_RETURN(Scm_MakeQuatf(sint*q[0], sint*q[1], sint*q[2], cost));
  }")

(define-cproc list->quatf (x)
  (return "Scm_ListToQuatf"))
(define-cproc quatf->list (q::<quatf>)
  (return "Scm_QuatfToList"))
(define-cproc f32vector->quatf (x::<f32vector>
                                &optional (start::<fixnum> 0))
  "int size = SCM_F32VECTOR_SIZE(x);
  if (start < 0 || size-start < 4)
    Scm_Error(\"f32vector too small: %S (start=%d)\", x, start);
  SCM_RETURN(Scm_MakeQuatfv(SCM_F32VECTOR_ELEMENTS(x)+start));")
(define-cproc quatf->f32vector (q::<quatf>)
  "SCM_RETURN(Scm_MakeF32VectorFromArray(4, SCM_QUATF_D(q)));")

(define-cproc quatf-copy (q::<quatf>)
  "SCM_RETURN(Scm_MakeQuatfv(SCM_QUATF_D(q)));")
(define-cproc quatf-copy! (dst::<quatf> src::<quatf>)
  "SCM_RETURN(Scm_QuatfSetv(dst, SCM_QUATF_D(src)));")

(define-cproc quatf-ref (q::<quatf> i::<fixnum> &optional fallback)
  "if (i<0 || i>3) {
    if (SCM_UNBOUNDP(fallback)) Scm_Error(\"index i out of range: %d\", i);
    SCM_RETURN(fallback);
  }
  SCM_RETURN(Scm_MakeFlonum(SCM_QUATF_D(q)[i]));")

(define-cproc quatf-set! (q::<quatf> i::<fixnum> val::<real>)
  "if (i<0 || i>3) Scm_Error(\"index i out of range: %d\", i);
  SCM_QUATF_D(q)[i] = (float)val;
  SCM_RETURN(SCM_OBJ(q));")

(define-cproc rotation->quatf! (q::<quatf> v angle::<real>)
  "float *qv = SCM_QUATF_D(q), *vv;
  double sint, cost;
  SCM_MATH3D_X3FP(vv, v);
  sint = sin(angle/2.0);
  cost = cos(angle/2.0);
  qv[0] = sint*vv[0]; qv[1] = sint*vv[1]; qv[2] = sint*vv[2]; qv[3] = cost;
  SCM_RETURN(SCM_OBJ(q));")

(define-cproc quatf-add (p::<quatf> q::<quatf>)
  (return "Scm_QuatfAdd"))
(define-cproc quatf-add! (p::<quatf> q::<quatf>)
  "float r[4];
  Scm_QuatfAddv(r, SCM_QUATF_D(p), SCM_QUATF_D(q));
  SCM_RETURN(Scm_QuatfSetv(p, r));")

(define-cproc quatf-sub (p::<quatf> q::<quatf>)
  (return "Scm_QuatfSub"))
(define-cproc quatf-sub! (p::<quatf> q::<quatf>)
  "float r[4];
  Scm_QuatfSubv(r, SCM_QUATF_D(p), SCM_QUATF_D(q));
  SCM_RETURN(Scm_QuatfSetv(p, r));")

(define-cproc quatf-scale (q::<quatf> s::<real>)
  "float *d = SCM_QUATF_D(q);
  if (s == 0.0) Scm_Error(\"divide by zero\");
  SCM_RETURN(Scm_MakeQuatf(d[0]/s, d[1]/s, d[2]/s, d[3]/s));")
(define-cproc quatf-scale! (q::<quatf> s::<real>)
  "float *d = SCM_QUATF_D(q);
  if (s == 0.0) Scm_Error(\"divide by zero\");
  d[0] /= s; d[1] /= s; d[2] /= s; d[3] /= s;
  SCM_RETURN(SCM_OBJ(q));")

(define-cproc quatf-mul (p::<quatf> q::<quatf>)
  (return "Scm_QuatfMul"))
(define-cproc quatf-mul! (p::<quatf> q::<quatf>)
  "float r[4];
  Scm_QuatfMulv(r, SCM_QUATF_D(p), SCM_QUATF_D(q));
  SCM_RETURN(Scm_QuatfSetv(p, r));")

;; calculate qpq*
(define-cproc quatf-transform (quat::<quatf> v)
  "float *d, *q, qconj[4], s[4], r[4];
  SCM_MATH3D_X4FP(d, v);
  q = SCM_QUATF_D(quat);
  qconj[0] = -q[0]; qconj[1] = -q[1]; qconj[2] = -q[2]; qconj[3] = q[3];
  Scm_QuatfMulv(s, q, d);
  Scm_QuatfMulv(r, s, qconj);
  if (SCM_VECTOR4FP(v)) SCM_RETURN(Scm_MakeVector4fv(r));
  else if (SCM_POINT4FP(v)) SCM_RETURN(Scm_MakePoint4fv(r));
  else SCM_RETURN(Scm_MakeF32VectorFromArray(4, r));")

(define-cproc quatf-conjugate (q::<quatf>)
  "float *d = SCM_QUATF_D(q);
  SCM_RETURN(Scm_MakeQuatf(-d[0], -d[1], -d[2], d[3]));")
(define-cproc quatf-norm (q::<quatf>)
  "SCM_RETURN(Scm_MakeFlonum(SCM_QUATF_NORMV(SCM_QUATF_D(q))));")
(define-cproc quatf-normalize (q::<quatf>)
  (return "Scm_QuatfNormalize"))
(define-cproc quatf-normalize! (q::<quatf>)
  (return "Scm_QuatfNormalizeX"))

(define-cproc quatf->matrix4f (q::<quatf>)
  "float m[16];
  Scm_QuatfToMatrix4fv(m, SCM_QUATF_D(q));
  SCM_RETURN(Scm_MakeMatrix4fv(m));")
(define-cproc quatf->matrix4f! (m::<matrix4f> q::<quatf>)
  "Scm_QuatfToMatrix4fv(SCM_MATRIX4F_D(m), SCM_QUATF_D(q));
  SCM_RETURN(SCM_OBJ(m));")

(define-cproc matrix4f->quatf (m::<matrix4f>)
  "float q[4];
  Scm_Matrix4fToQuatfv(q, SCM_MATRIX4F_D(m));
  SCM_RETURN(Scm_MakeQuatfv(q));")
(define-cproc matrix4f->quatf! (q::<quatf> m::<matrix4f>)
  "Scm_Matrix4fToQuatfv(SCM_QUATF_D(q), SCM_MATRIX4F_D(m));
  SCM_RETURN(SCM_OBJ(q));")

(define-cproc quatf-slerp (p::<quatf> q::<quatf> t::<real>)
  "float r[4];
  Scm_QuatfSlerp(r, SCM_QUATF_D(q), SCM_QUATF_D(p), t);
  SCM_RETURN(Scm_MakeQuatfv(r));")
(define-cproc quatf-slerp! (r::<quatf> p::<quatf> q::<quatf> t::<real>)
  "Scm_QuatfSlerp(SCM_QUATF_D(r), SCM_QUATF_D(p), SCM_QUATF_D(p), t);
  SCM_RETURN(SCM_OBJ(r));")

;; Local variables:
;; mode: scheme
;; end:
