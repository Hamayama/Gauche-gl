;;;
;;; math3d-lib.stub - 3d vector arithmetics
;;;
;;;  Copyright(C) 2002 by Shiro Kawai (shiro@acm.org)
;;;
;;;  Permission to use, copy, modify, distribute this software and
;;;  accompanying documentation for any purpose is hereby granted,
;;;  provided that existing copyright notices are retained in all
;;;  copies and that this notice is included verbatim in all
;;;  distributions.
;;;  This software is provided as is, without express or implied
;;;  warranty.  In no circumstances the author(s) shall be liable
;;;  for any damages arising out of the use of this software.
;;;
;;;  $Id: math3d-lib.stub,v 1.4 2002-09-29 00:29:11 shirok Exp $
;;;

"
#include <gauche/uvector.h>
#include \"gauche/math3d.h\"
"

(define-type <vector4f> "ScmVector4f*" #f "SCM_VECTOR4FP" "SCM_VECTOR4F")
(define-type <vector4f-array> "ScmVector4fArray*" #f
  "SCM_VECTOR4F_ARRAY_P" "SCM_VECTOR4F_ARRAY")
(define-type <point4f> "ScmPoint4f*" #f "SCM_POINT4FP" "SCM_POINT4F")
(define-type <point4f-array> "ScmPoint4fArray*" #f
  "SCM_POINT4F_ARRAY_P" "SCM_POINT4F_ARRAY")

(define-type <matrix4f> "ScmMatrix4f*" #f "SCM_MATRIX4FP" "SCM_MATRIX4F")

(define-type <quatf> "ScmQuatf*" #f "SCM_QUATFP" "SCM_QUATF")

(define-type <f32vector> "ScmF32Vector*")

;;================================================================
;; Vector4f
;;

(define-cproc vector4f
  (x::<real> y::<real> z::<real> &optional (w::<real> 0.0))
  (return "Scm_MakeVector4f"))

(define-cproc vector4f? (obj)
  (return <boolean> "SCM_VECTOR4FP"))

(define-cproc list->vector4f (l::<list>)
  (return "Scm_ListToVector4f"))

(define-cproc vector4f->list (v::<vector4f>)
  (return "Scm_Vector4fToList"))

(define-cproc f32vector->vector4f (v::<f32vector> &optional (start::<fixnum> 0))
  "int size = SCM_F32VECTOR_SIZE(v);
  if (start < 0 || size-start < 4)
    Scm_Error(\"f32vector too small: %S (start=%d)\", v, start);
  SCM_RETURN(Scm_MakeVector4fv(SCM_F32VECTOR_ELEMENTS(v)+start));")
  
(define-cproc vector4f->f32vector (v::<vector4f>)
  "ScmObj fv = Scm_MakeF32Vector(4, 0.0);
  int i;
  for (i=0; i<4; i++) SCM_F32VECTOR_ELEMENTS(fv)[i] = SCM_VECTOR4F_D(v)[i];
  SCM_RETURN(fv);")

(define-cproc vector4f-ref (x::<vector4f> i::<fixnum> &optional fallback)
  "if (i < 0 || i > 3) {
     if (SCM_UNBOUNDP(fallback)) {
         Scm_Error(\"vector index out of range: %d\", i);
     }
     SCM_RETURN(fallback);
  }
  SCM_RETURN(Scm_MakeFlonum(SCM_VECTOR4F_REF(x, i)));"
  (setter (x::<vector4f> i::<fixnum> v::<real>)
   "if (i < 0 || i > 3) Scm_Error(\"vector index out of range: %d\", i);
    SCM_VECTOR4F_D(x)[i] = v;
    SCM_RETURN(SCM_UNDEFINED);"))

(define-cproc vector4f-dot (x::<vector4f> y::<vector4f>)
  (return <float> "Scm_Vector4fDot"))

(define-cproc vector4f-cross (x::<vector4f> y::<vector4f>)
  (return "Scm_Vector4fCross"))

(define-cproc vector4f-normalize (x::<vector4f>)
  (return "Scm_Vector4fNormalize"))

(define-cproc vector4f-normalize! (x::<vector4f>)
  (return "Scm_Vector4fNormalizeX"))

(define-cproc vector4f-add (x::<vector4f> y::<vector4f>)
  (return "Scm_Vector4fAdd"))

(define-cproc vector4f-sub (x::<vector4f> y::<vector4f>)
  (return "Scm_Vector4fSub"))

;; VectorArray --------------------------------------------------

(define-cproc make-vector4f-array (len::<fixnum> &optional init)
  "ScmObj va = SCM_FALSE;
  if (len < 0) Scm_Error(\"vector4f-array length must be positive: %d\", len);
  if (SCM_VECTOR4FP(init)) {
    va = Scm_MakeVector4fArrayv(len, SCM_VECTOR4F_D(init));
  } else if (SCM_UNBOUNDP(init)) {
    va = Scm_MakeVector4fArrayv(len, NULL);
  } else {
    Scm_Error(\"bad initializer for vector array: must be <vector4f>, but got %S\", init);
  }
  SCM_RETURN(va);")

(define-cproc vector4f-array? (obj)
  (return <boolean> "SCM_VECTOR4F_ARRAY_P"))

(define-cproc vector4f-array-length (v::<vector4f-array>)
  (return <fixnum> "SCM_VECTOR4F_ARRAY_SIZE"))

;(define-cproc f32vector->vector4f-array (v::<f32vector>)
;  (return "Scm_F32VectorToVectorArray"))

;(define-cproc vector4f-array->f32vector (a::<vector4f-array>)
;  (return "Scm_Vector4fArrayToF32Vector"))

(define-cproc vector4f-array-set! (a::<vector4f-array>
                                   i::<fixnum> x::<vector4f>)
  (return <void> "Scm_Vector4fArraySet"))

(define-cproc vector4f-array-ref (a::<vector4f-array>
                                  i::<fixnum> &optional fallback)
  (return "Scm_Vector4fArrayRef")
  (setter vector4f-array-set!))

;; point4f ------------------------------------------------------

(define-cproc point4f (x::<real> y::<real> z::<real> &optional (w::<real> 1.0))
  (return "Scm_MakePoint4f"))

(define-cproc point4f? (obj)
  (return <boolean> "SCM_POINT4FP"))

(define-cproc list->point4f (l::<list>)
  (return "Scm_ListToPoint4f"))

(define-cproc point4f->list (x::<point4f>)
  (return "Scm_Point4fToList"))

;(define-cproc f32vector->point4f (v::<f32vector>)
;  (return "Scm_F32VectorToPoint4f"))

;(define-cproc point4f->f32vector (x::<point4f>)
;  (return "Scm_Point4fToF32Vector"))

(define-cproc point4f-ref (x::<point4f> i::<fixnum>)
  "if (i < 0 || i > 3) Scm_Error(\"vpoint index out of range: %d\", i);
  SCM_RETURN(Scm_MakeFlonum(SCM_POINT4F_REF(x, i)));"
  (setter (x::<point4f> i::<fixnum> v::<real>)
   "if (i < 0 || i > 3) Scm_Error(\"point index out of range: %d\", i);
    SCM_POINT4F_D(x)[i] = v;
    SCM_RETURN(SCM_UNDEFINED);"))

(define-cproc point4f-add (x::<point4f> y::<vector4f>)
  (return "Scm_Point4fAdd"))

(define-cproc point4f-sub (x::<point4f> y)
  (return "Scm_Point4fSub"))

;; Point4fArray ---------------------------------------------------

(define-cproc make-point4f-array (len::<fixnum> &optional init)
  "ScmObj va = SCM_FALSE;
  if (len < 0) Scm_Error(\"point4f-array length must be positive: %d\", len);
  if (SCM_POINT4FP(init)) {
    va = Scm_MakePoint4fArrayv(len, SCM_POINT4F_D(init));
  } else if (SCM_UNBOUNDP(init)) {
    va = Scm_MakePoint4fArrayv(len, NULL);
  } else {
    Scm_Error(\"bad initializer for point array: must be <point4f>, but got %S\", init);
  }
  SCM_RETURN(va);")

(define-cproc point4f-array? (obj)
  (return <boolean> "SCM_POINT4F_ARRAY_P"))

(define-cproc point4f-array-length (v::<point4f-array>)
  (return <fixnum> "SCM_POINT4F_ARRAY_SIZE"))

;(define-cproc f32vector->point4f-array (v::<f32vector>)
;  (return "Scm_F32VectorToPoint4fArray"))

;(define-cproc point4f-array->f32vector (a::<point4f-array>)
;  (return "Scm_Point4fArrayToF32Vector"))

(define-cproc point4f-array-set! (a::<point4f-array>
                                  i::<fixnum>
                                  x::<point4f>)
  (return <void> "Scm_Point4fArraySet"))

(define-cproc point4f-array-ref (a::<point4f-array> i::<fixnum> &optional fallback)
  (return "Scm_Point4fArrayRef")
  (setter point4f-array-set!))

;; Matrix4f -------------------------------------------------------

(define-cproc make-matrix4f (&optional init)
  "if (SCM_UNBOUNDP(init)) {
    static float unit[] = { 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
    SCM_RETURN(Scm_MakeMatrix4fv(unit));
  } else if (!SCM_F32VECTORP(init)) {
    Scm_Error(\"f32vector required, but got %S\", init);
  }
  SCM_RETURN(Scm_MakeMatrix4fV(SCM_F32VECTOR(init)));")

(define-cproc matrix4f (&rest args)
  (return "Scm_ListToMatrix4f"))

(define-cproc matrix4f? (obj)
  (return <boolean> "SCM_MATRIX4FP"))

(define-cproc list->matrix4f (l::<list>)
  (return "Scm_ListToMatrix4f"))

(define-cproc matrix4f-mul (p::<matrix4f> q)
  "if (SCM_MATRIX4FP(q)) SCM_RETURN(Scm_Matrix4fMulMatrix4f(p, SCM_MATRIX4F(q)));
  if (SCM_VECTOR4FP(q)) SCM_RETURN(Scm_Matrix4fMulVector4f(p, SCM_VECTOR4F(q)));
  if (SCM_POINT4FP(q)) SCM_RETURN(Scm_Matrix4fMulPoint4f(p, SCM_POINT4F(q)));
  if (SCM_REALP(q)) SCM_RETURN(Scm_Matrix4fScale(p, Scm_GetDouble(q)));
  Scm_Error(\"bad object, matrix4f, vector4f, point4f or real number required, but got %S\", q);
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc matrix4f-ref (m::<matrix4f> i::<fixnum> j::<fixnum>)
  "if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
  if (j < 0 || j > 3) Scm_Error(\"index j out of range: %d\", j);
  SCM_RETURN(Scm_MakeFlonum(SCM_MATRIX4F_REF(m, i, j)));"
  (setter matrix4f-set!))

(define-cproc matrix4f-set! (m::<matrix4f> i::<fixnum> j::<fixnum> v::<real>)
  "if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
  if (j < 0 || j > 3) Scm_Error(\"index j out of range: %d\", j);
  SCM_MATRIX4F_SET(m, i, j, v);
  SCM_RETURN(SCM_UNDEFINED);")

(define-cproc matrix4f-row (m::<matrix4f> i::<fixnum>)
  "if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
  SCM_RETURN(Scm_MakeVector4f(SCM_MATRIX4F_REF(m, i, 0),
                              SCM_MATRIX4F_REF(m, i, 1), 
                              SCM_MATRIX4F_REF(m, i, 2),
                              SCM_MATRIX4F_REF(m, i, 3)));"
  (setter (m::<matrix4f> i::<fixnum> v::<vector4f>)
    "if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
    SCM_MATRIX4F_SET(m, i, 0, SCM_VECTOR4F_REF(v, 0));
    SCM_MATRIX4F_SET(m, i, 1, SCM_VECTOR4F_REF(v, 1));
    SCM_MATRIX4F_SET(m, i, 2, SCM_VECTOR4F_REF(v, 2));
    SCM_MATRIX4F_SET(m, i, 3, SCM_VECTOR4F_REF(v, 3));
    SCM_RETURN(SCM_UNDEFINED);")
  )

(define-cproc matrix4f-column (m::<matrix4f> i::<fixnum>)
  "if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
  SCM_RETURN(Scm_MakeVector4fv(SCM_MATRIX4F_COLVEC(m, i)));"
  (setter (m::<matrix4f> i::<fixnum> v::<vector4f>)
    "if (i < 0 || i > 3) Scm_Error(\"index i out of range: %d\", i);
    SCM_MATRIX4F_SET(m, 0, i, SCM_VECTOR4F_REF(v, 0));
    SCM_MATRIX4F_SET(m, 1, i, SCM_VECTOR4F_REF(v, 1));
    SCM_MATRIX4F_SET(m, 2, i, SCM_VECTOR4F_REF(v, 2));
    SCM_MATRIX4F_SET(m, 3, i, SCM_VECTOR4F_REF(v, 3));
    SCM_RETURN(SCM_UNDEFINED);")
  )

;; Quatf ----------------------------------------------------

(define-cproc quatf (x::<real> y::<real> z::<real> w::<real>)
  (return "Scm_MakeQuatf"))

(define-cproc quatf? (obj)
  (return <boolean> "SCM_QUATFP"))

(define-cproc make-quatf (&optional init)
  "if (SCM_UNBOUNDP(init)) {
    SCM_RETURN(Scm_MakeQuatf(0.0, 0.0, 0.0, 1.0));
  } else if (!SCM_F32VECTORP(init)) {
    Scm_Error(\"f32vector required, but got %S\", init);
  }
  SCM_RETURN(Scm_MakeQuatfV(SCM_F32VECTOR(init)));")

(define-cproc list->quatf (x)
  (return "Scm_ListToQuatf"))
(define-cproc quatf->list (q::<quatf>)
  (return "Scm_QuatfToList"))
;(define-cproc f32vector->quatf (x::<f32vector>)
;  (return "Scm_F32VectorToQuatf"))
;(define-cproc quatf->f32vector (q::<quatf>)
;  (return "Scm_QuatfToF32Vector"))

(define-cproc quatf-add (p::<quatf> q::<quatf>)
  (return "Scm_QuatfAdd"))
(define-cproc quatf-sub (p::<quatf> q::<quatf>)
  (return "Scm_QuatfSub"))
(define-cproc quatf-mul (p::<quatf> q::<quatf>)
  (return "Scm_QuatfMul"))
(define-cproc quatf-normalize (q::<quatf>)
  (return "Scm_QuatfNormalize"))
(define-cproc quatf-normalize! (q::<quatf>)
  (return "Scm_QuatfNormalizeX"))


;; Local variables:
;; mode: scheme
;; end:
