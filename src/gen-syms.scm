;;;
;;; gen-syms.scm - Generate gl-syms.stub
;;;
;;;  Copyright(C) 2005 by Shiro Kawai (shiro@acm.org)
;;;
;;;  Redistribution and use in source and binary forms, with or without
;;;  modification, are permitted provided that the following conditions
;;;  are met:
;;;
;;;   1. Redistributions of source code must retain the above copyright
;;;      notice, this list of conditions and the following disclaimer.
;;;
;;;   2. Redistributions in binary form must reproduce the above copyright
;;;      notice, this list of conditions and the following disclaimer in the
;;;      documentation and/or other materials provided with the distribution.
;;;
;;;   3. Neither the name of the authors nor the names of its contributors
;;;      may be used to endorse or promote products derived from this
;;;      software without specific prior written permission.
;;;
;;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;;;  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;;;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;;;  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;;;  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;;;  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
;;;  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
;;;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
;;;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
;;;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;;;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;;
;;;  $Id: gen-syms.scm,v 1.1 2005-06-03 18:33:54 shirok Exp $
;;;

(use util.match)

(define *glext-abi* "glext-abi.scm")

(define (main args)
  (with-output-to-file "gl-syms.stub"
    (lambda ()
      (print ";; generated by $Id: gen-syms.scm,v 1.1 2005-06-03 18:33:54 shirok Exp $")
      (print "\"#include \\\"gauche-gl.h\\\"\"")
      (with-input-from-file *glext-abi*
        (cut port-for-each gen read))
      )))

(define (gen expr)
  (match expr
    (('define-constant var val)
     (format #t "\"#undef ~a\"\n" var)
     (format #t "\"#define ~a ~a\"\n" var val)
     (format #t "(define-enum ~a)\n" var))
    (else #f)))


     
     
     
     
